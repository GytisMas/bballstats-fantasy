// <auto-generated />
using System;
using BBallStats.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BBallStatsV2.Migrations
{
    [DbContext(typeof(ForumDbContext))]
    [Migration("20240507131831_TransactionNullableRecipient")]
    partial class TransactionNullableRecipient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BBallStats.Data.Entities.AlgorithmImpression", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomStatisticId")
                        .HasColumnType("integer");

                    b.Property<bool>("Positive")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomStatisticId");

                    b.HasIndex("UserId");

                    b.ToTable("AlgorithmImpressions");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CurrentTeamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<bool>("SkippedLastGame")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CurrentTeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.PlayerStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AttemptValue")
                        .HasColumnType("real");

                    b.Property<int>("GameCount")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatisticId")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("StatisticId");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("DefaultIsChecked")
                        .HasColumnType("boolean");

                    b.Property<double>("DefaultLeaguePointsPerStat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Statistics");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Statistic");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BBallStats.Data.Entities.Team", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("LogoLink")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.TeamStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("AttemptValue")
                        .HasColumnType("real");

                    b.Property<int>("StatisticId")
                        .HasColumnType("integer");

                    b.Property<string>("TeamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("StatisticId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamStatistics");
                });

            modelBuilder.Entity("BBallStats2.Auth.Model.ForumRestUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("ForceRelogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.CustomStatisticRegularStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomStatisticId")
                        .HasColumnType("integer");

                    b.Property<int>("RegularStatisticId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomStatisticId");

                    b.HasIndex("RegularStatisticId");

                    b.ToTable("CustomStatisticRegularStatistic");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntryFee")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOver")
                        .HasColumnType("boolean");

                    b.Property<string>("LeagueHostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LeagueTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LeagueHostId");

                    b.HasIndex("LeagueTemplateId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueAvailablePlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("PlayerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("PlayerId");

                    b.ToTable("LeagueAvailablePlayers");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId");

                    b.ToTable("LeagueParticipants");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeaguePayment", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("Placing")
                        .HasColumnType("integer");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("LeagueId", "Placing");

                    b.ToTable("LeaguePayment");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeaguePlayerRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoleToReplaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeagueTemplateId");

                    b.HasIndex("RoleToReplaceId");

                    b.ToTable("LeaguePlayerRoles");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueStatisticToCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LeaguePlayerRoleId")
                        .HasColumnType("integer");

                    b.Property<double>("PointsPerStat")
                        .HasColumnType("double precision");

                    b.Property<int>("StatisticId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeaguePlayerRoleId");

                    b.HasIndex("StatisticId");

                    b.ToTable("LeagueStatisticsToCount");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("BenchMultiplier")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("TeamLosePoints")
                        .HasColumnType("double precision");

                    b.Property<double>("TeamWinPoints")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("LeagueTemplates");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayTeamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("HomeTeamId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<bool>("UsedInFantasy")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.ParticipantsRosterPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LeagueAvailablePlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("LeagueParticipantId")
                        .HasColumnType("integer");

                    b.Property<int>("LeaguePlayerRoleId")
                        .HasColumnType("integer");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<double>("PointsLastGame")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("LeagueAvailablePlayerId");

                    b.HasIndex("LeagueParticipantId");

                    b.HasIndex("LeaguePlayerRoleId");

                    b.ToTable("ParticipantsRosterPlayers");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RecipientId")
                        .HasColumnType("text");

                    b.Property<string>("SenderId")
                        .HasColumnType("text");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BBallStats.Data.Entities.CustomStatistic", b =>
                {
                    b.HasBaseType("BBallStats.Data.Entities.Statistic");

                    b.Property<string>("Formula")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("CustomStatistic");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.RegularStatistic", b =>
                {
                    b.HasBaseType("BBallStats.Data.Entities.Statistic");

                    b.HasDiscriminator().HasValue("RegularStatistic");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.AlgorithmImpression", b =>
                {
                    b.HasOne("BBallStats.Data.Entities.CustomStatistic", "CustomStatistic")
                        .WithMany()
                        .HasForeignKey("CustomStatisticId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomStatistic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.Player", b =>
                {
                    b.HasOne("BBallStats.Data.Entities.Team", "CurrentTeam")
                        .WithMany()
                        .HasForeignKey("CurrentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentTeam");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.PlayerStatistic", b =>
                {
                    b.HasOne("BBallStats.Data.Entities.Player", "Player")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStats.Data.Entities.RegularStatistic", "Statistic")
                        .WithMany()
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Statistic");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.TeamStatistic", b =>
                {
                    b.HasOne("BBallStats.Data.Entities.RegularStatistic", "Statistic")
                        .WithMany()
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStats.Data.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Statistic");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.CustomStatisticRegularStatistic", b =>
                {
                    b.HasOne("BBallStats.Data.Entities.CustomStatistic", null)
                        .WithMany()
                        .HasForeignKey("CustomStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStats.Data.Entities.RegularStatistic", null)
                        .WithMany()
                        .HasForeignKey("RegularStatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.League", b =>
                {
                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", "LeagueHost")
                        .WithMany()
                        .HasForeignKey("LeagueHostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStatsV2.Data.Entities.LeagueTemplate", "LeagueTemplate")
                        .WithMany("Leagues")
                        .HasForeignKey("LeagueTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeagueHost");

                    b.Navigation("LeagueTemplate");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueAvailablePlayer", b =>
                {
                    b.HasOne("BBallStatsV2.Data.Entities.League", "League")
                        .WithMany("LeagueAvailablePlayers")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BBallStats.Data.Entities.Player", "Player")
                        .WithMany("LeagueAvailablePlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueParticipant", b =>
                {
                    b.HasOne("BBallStatsV2.Data.Entities.League", "League")
                        .WithMany("Participants")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeaguePayment", b =>
                {
                    b.HasOne("BBallStatsV2.Data.Entities.League", null)
                        .WithMany("Payments")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeaguePlayerRole", b =>
                {
                    b.HasOne("BBallStatsV2.Data.Entities.LeagueTemplate", "LeagueTemplate")
                        .WithMany("Roles")
                        .HasForeignKey("LeagueTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStatsV2.Data.Entities.LeaguePlayerRole", "RoleToReplace")
                        .WithMany()
                        .HasForeignKey("RoleToReplaceId");

                    b.Navigation("LeagueTemplate");

                    b.Navigation("RoleToReplace");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueStatisticToCount", b =>
                {
                    b.HasOne("BBallStatsV2.Data.Entities.LeaguePlayerRole", "LeaguePlayerRole")
                        .WithMany("Statistics")
                        .HasForeignKey("LeaguePlayerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStats.Data.Entities.Statistic", null)
                        .WithMany()
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaguePlayerRole");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.Match", b =>
                {
                    b.HasOne("BBallStats.Data.Entities.Team", "AwayTeam")
                        .WithMany()
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BBallStats.Data.Entities.Team", "HomeTeam")
                        .WithMany()
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.ParticipantsRosterPlayer", b =>
                {
                    b.HasOne("BBallStatsV2.Data.Entities.LeagueAvailablePlayer", "LeagueAvailablePlayer")
                        .WithMany("UsedPlayers")
                        .HasForeignKey("LeagueAvailablePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStatsV2.Data.Entities.LeagueParticipant", "LeagueParticipant")
                        .WithMany("Team")
                        .HasForeignKey("LeagueParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStatsV2.Data.Entities.LeaguePlayerRole", "LeaguePlayerRole")
                        .WithMany()
                        .HasForeignKey("LeaguePlayerRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeagueAvailablePlayer");

                    b.Navigation("LeagueParticipant");

                    b.Navigation("LeaguePlayerRole");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.Transaction", b =>
                {
                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBallStats.Data.Entities.CustomStatistic", b =>
                {
                    b.HasOne("BBallStats2.Auth.Model.ForumRestUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBallStats.Data.Entities.Player", b =>
                {
                    b.Navigation("LeagueAvailablePlayers");

                    b.Navigation("PlayerStatistics");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.League", b =>
                {
                    b.Navigation("LeagueAvailablePlayers");

                    b.Navigation("Participants");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueAvailablePlayer", b =>
                {
                    b.Navigation("UsedPlayers");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueParticipant", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeaguePlayerRole", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("BBallStatsV2.Data.Entities.LeagueTemplate", b =>
                {
                    b.Navigation("Leagues");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
